
import React, { useState } from 'react';
import { AlertTriangle, Shield, Eye, Clock, CheckCircle, Info } from 'lucide-react';
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";

const VulnerabilityAssessment = () => {
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [selectedVuln, setSelectedVuln] = useState(null);

  const vulnerabilities = [
    {
      id: 1,
      title: 'Outdated SSL Certificate',
      description: 'SSL certificate for mail.techcorp.com expired 5 days ago',
      severity: 'high',
      affected: 'TechCorp Solutions',
      discovered: '2024-06-10',
      status: 'open',
      cvss: 8.2,
      recommendations: [
        "Renew the SSL certificate immediately to restore secure communications.",
        "Audit certificate renewal processes to prevent future lapses.",
        "Notify impacted users as needed.",
      ],
      evidence: [
        "Certificate expiration date found in TLS details.",
        "Access to mail server unsuccessful over HTTPS.",
      ]
    },
    {
      id: 2,
      title: 'Weak Password Policy',
      description: 'Password policy allows passwords shorter than 8 characters',
      severity: 'medium',
      affected: 'RetailMax Group',
      discovered: '2024-06-08',
      status: 'in-progress',
      cvss: 5.4,
      recommendations: [
        "Enforce a minimum password length of 12 characters.",
        "Implement complexity requirements: uppercase, digits, special characters.",
        "Educate users on strong password practices.",
      ],
      evidence: [
        "Password creation form permits passwords as short as 6 characters.",
        "Audit logs indicate several weak passwords in use.",
      ]
    },
    {
      id: 3,
      title: 'Unpatched Operating System',
      description: 'Windows Server 2016 missing critical security updates',
      severity: 'high',
      affected: 'MedHealth Services',
      discovered: '2024-06-07',
      status: 'resolved',
      cvss: 9.1,
      recommendations: [
        "Maintain a regular patch management schedule for all servers.",
        "Verify auto-updates are enabled and functional.",
        "Audit patching to ensure compliance.",
      ],
      evidence: [
        "System scan revealed missing June cumulative update.",
        "No recent update activity in Windows Event Log.",
      ]
    },
    {
      id: 4,
      title: 'Open Database Port',
      description: 'MySQL database accessible from external network',
      severity: 'critical',
      affected: 'FinSecure Ltd',
      discovered: '2024-06-09',
      status: 'open',
      cvss: 9.8,
      recommendations: [
        "Restrict MySQL port access to only trusted internal IPs.",
        "Implement network firewalls and security groups.",
        "Rotate database passwords and monitor for unauthorized access.",
      ],
      evidence: [
        "Open port 3306 visible on external network scan.",
        "No active firewall rule detected for the database server.",
      ]
    },
    {
      id: 5,
      title: 'Missing Firewall Rules',
      description: 'Several unnecessary ports open to the internet',
      severity: 'medium',
      affected: 'EduPlatform Inc',
      discovered: '2024-06-06',
      status: 'in-progress',
      cvss: 6.3,
      recommendations: [
        "Review and close all irrelevant open ports.",
        "Document firewall rule changes for compliance.",
        "Perform regular external scans to ensure proper configuration.",
      ],
      evidence: [
        "Ports 21 (FTP) and 8080 exposed, not required for operations.",
        "No documentation for current firewall rules.",
      ]
    }
  ];

  const severityFilter = ['all', 'critical', 'high', 'medium', 'low'];

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-red-500 text-white';
      case 'medium': return 'bg-yellow-500 text-black';
      case 'low': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'open': return 'bg-red-500/20 text-red-400';
      case 'in-progress': return 'bg-yellow-500/20 text-yellow-400';
      case 'resolved': return 'bg-green-500/20 text-green-400';
      default: return 'bg-gray-500/20 text-gray-400';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'open': return <AlertTriangle className="h-4 w-4" />;
      case 'in-progress': return <Clock className="h-4 w-4" />;
      case 'resolved': return <CheckCircle className="h-4 w-4" />;
      default: return <Eye className="h-4 w-4" />;
    }
  };

  const filteredVulnerabilities = selectedSeverity === 'all' 
    ? vulnerabilities 
    : vulnerabilities.filter(v => v.severity === selectedSeverity);

  const stats = {
    total: vulnerabilities.length,
    critical: vulnerabilities.filter(v => v.severity === 'critical').length,
    high: vulnerabilities.filter(v => v.severity === 'high').length,
    medium: vulnerabilities.filter(v => v.severity === 'medium').length,
    resolved: vulnerabilities.filter(v => v.status === 'resolved').length
  };

  // Find the full details for a selected vulnerability
  const findVulnById = (id) => vulnerabilities.find(v => v.id === id);

  return (
    <div className="space-y-8">
      {/* Vulnerability Stats */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
        <div className="bg-slate-900/50 border border-white/10 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-white">{stats.total}</div>
          <div className="text-gray-400 text-sm">Total</div>
        </div>
        <div className="bg-red-600/20 border border-red-600/30 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-red-400">{stats.critical}</div>
          <div className="text-red-400 text-sm">Critical</div>
        </div>
        <div className="bg-red-500/20 border border-red-500/30 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-red-400">{stats.high}</div>
          <div className="text-red-400 text-sm">High</div>
        </div>
        <div className="bg-yellow-500/20 border border-yellow-500/30 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-yellow-400">{stats.medium}</div>
          <div className="text-yellow-400 text-sm">Medium</div>
        </div>
        <div className="bg-green-500/20 border border-green-500/30 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-green-400">{stats.resolved}</div>
          <div className="text-green-400 text-sm">Resolved</div>
        </div>
      </div>

      {/* Filter and Search */}
      <div className="bg-black/30 backdrop-blur-lg border border-white/10 p-6 rounded-xl">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-white flex items-center space-x-2">
            <AlertTriangle className="h-6 w-6 text-red-400" />
            <span>Vulnerability Assessment</span>
          </h3>
          
          <div className="flex items-center space-x-2">
            <span className="text-gray-400 text-sm">Filter by severity:</span>
            <select
              value={selectedSeverity}
              onChange={(e) => setSelectedSeverity(e.target.value)}
              className="bg-slate-900 border border-white/10 text-white px-3 py-1 rounded-lg text-sm"
            >
              {severityFilter.map(severity => (
                <option key={severity} value={severity}>
                  {severity.charAt(0).toUpperCase() + severity.slice(1)}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* Vulnerabilities List */}
        <div className="space-y-4">
          {filteredVulnerabilities.map((vuln) => (
            <div key={vuln.id} className="bg-slate-900/50 p-4 rounded-lg border border-white/10 hover:border-white/20 transition-all duration-200">
              <div className="flex items-start justify-between mb-3 flex-wrap gap-2">
                <div className="flex-1 min-w-[180px]">
                  <div className="flex items-center space-x-3 mb-2">
                    <h4 className="text-white font-semibold">{vuln.title}</h4>
                    <span className={`px-2 py-1 rounded-full text-xs font-bold ${getSeverityColor(vuln.severity)}`}>
                      {vuln.severity.toUpperCase()}
                    </span>
                    <span className="text-gray-400 text-sm">CVSS: {vuln.cvss}</span>
                  </div>
                  <p className="text-gray-400 text-sm mb-2">{vuln.description}</p>
                  <div className="flex items-center space-x-4 text-xs text-gray-500">
                    <span>Affected: {vuln.affected}</span>
                    <span>Discovered: {vuln.discovered}</span>
                  </div>
                </div>
                <div className="flex flex-col gap-2 items-end">
                  <span className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(vuln.status)}`}>
                    {getStatusIcon(vuln.status)}
                    <span className="capitalize">{vuln.status.replace('-', ' ')}</span>
                  </span>
                  
                  {/* Interactive View Details Button */}
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button
                        className="text-cyan-400 hover:text-cyan-300 text-sm font-medium bg-transparent px-0 py-0 h-auto"
                        variant="link"
                        onClick={() => setSelectedVuln(vuln.id)}
                        aria-label={`View details about ${vuln.title}`}
                      >
                        View Details
                      </Button>
                    </DialogTrigger>
                    {/* Dialog opens if this vuln is selected */}
                    <DialogContent
                      className="max-w-lg w-full"
                      open={selectedVuln === vuln.id}
                      onOpenChange={open => { if (!open) setSelectedVuln(null); }}
                    >
                      <DialogHeader>
                        <DialogTitle className="flex items-center gap-2">
                          <Info className="h-5 w-5 text-cyan-400" />
                          {vuln.title}
                        </DialogTitle>
                        <DialogDescription>
                          <span className="font-semibold">Severity:</span>{" "}
                          <span className={getSeverityColor(vuln.severity) + " px-2 py-1 rounded-full text-xs font-bold"}>{vuln.severity.toUpperCase()}</span>
                        </DialogDescription>
                      </DialogHeader>
                      <div className="space-y-3 mt-2">
                        <div>
                          <span className="font-semibold text-gray-300">Description:</span>
                          <p className="text-gray-300 text-sm mt-1">{vuln.description}</p>
                        </div>
                        <div>
                          <span className="font-semibold text-gray-300">Affected SME:</span>
                          <span className="text-sm ml-1 text-purple-200">{vuln.affected}</span>
                        </div>
                        <div>
                          <span className="font-semibold text-gray-300">Discovered:</span>
                          <span className="text-sm ml-1 text-sky-200">{vuln.discovered}</span>
                        </div>
                        <div>
                          <span className="font-semibold text-gray-300">Status:</span>
                          <span className={`ml-2 text-xs px-2 py-1 rounded-full font-medium ${getStatusColor(vuln.status)}`}>{vuln.status}</span>
                        </div>
                        <div>
                          <span className="font-semibold text-gray-300">CVSS Score:</span>
                          <span className="ml-2 text-white">{vuln.cvss}</span>
                        </div>
                        <div>
                          <span className="font-semibold text-cyan-400">Recommendations:</span>
                          <ul className="list-disc pl-5 mt-1 text-cyan-200 text-sm space-y-1">
                            {vuln.recommendations && vuln.recommendations.map((rec, i) => (
                              <li key={i}>{rec}</li>
                            ))}
                          </ul>
                        </div>
                        <div>
                          <span className="font-semibold text-yellow-400">Evidence:</span>
                          <ul className="list-disc pl-5 mt-1 text-yellow-100 text-sm space-y-1">
                            {vuln.evidence && vuln.evidence.map((ev, i) => (
                              <li key={i}>{ev}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                      <DialogClose asChild>
                        <Button className="mt-5 w-full" variant="secondary">
                          Close
                        </Button>
                      </DialogClose>
                    </DialogContent>
                  </Dialog>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* AI Recommendations */}
      <div className="bg-gradient-to-r from-purple-500/20 to-cyan-500/20 border border-purple-500/30 p-6 rounded-xl">
        <h3 className="text-xl font-bold text-white mb-4">🤖 AI Security Recommendations</h3>
        <div className="space-y-3">
          <div className="bg-black/30 p-4 rounded-lg">
            <h4 className="text-cyan-400 font-semibold mb-1">Priority Action Required</h4>
            <p className="text-gray-300 text-sm">
              Critical vulnerability detected at FinSecure Ltd. Open database port poses immediate risk. 
              Recommend implementing firewall rules and access controls within 24 hours.
            </p>
          </div>
          <div className="bg-black/30 p-4 rounded-lg">
            <h4 className="text-yellow-400 font-semibold mb-1">Security Pattern Detected</h4>
            <p className="text-gray-300 text-sm">
              Multiple SMEs showing similar SSL certificate management issues. Consider implementing 
              automated certificate renewal system across all clients.
            </p>
          </div>
          <div className="bg-black/30 p-4 rounded-lg">
            <h4 className="text-green-400 font-semibold mb-1">Improvement Trend</h4>
            <p className="text-gray-300 text-sm">
              Resolution time has improved by 30% this month. Current ML models are successfully 
              prioritizing critical vulnerabilities for faster response.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityAssessment;

